//Alexander Rollison 
.global isStrSame
.global strConcatenate
.global sumU16_32
.global sumS32
.global countInRange
.global rightStringFull
.global rightStringTrunc
.global sortAscending
.global decimalStringToUint16
.global decimalStringToInt8
.global hexStringToUint8
.global uint32ToBinaryString
.global findCityAligned
.global findCityPacked

.text
//////////////////////////////////////////////////////////
//bool isStrSame(const char str1[], const char str2[]);
// 						R0					R1
// returns 1 if the strings match, 0 otherwise

isStrSame:
	push {R4, R5, R6}
	MOV R2, R0 		// move str1[] to R2
	MOV R0, #0		//R0 is now a counter
	MOV R3, R1		//move str2[] to R3
	MOV R1, #0		//R1 is now a counter
	MOV R6, #1		//R6 is a variable 1
isStrSame_loop:
	LDRSB R4, [R2, R0]	//load R0ith char from str 1 into R4
	LDRSB R5, [R3,R1]	//load R1ith char from str 2 into R5
	CMP R4, R5			//compare chars
	MOVNE R6, #0		//if they aren't equal, move 0 into R0 and 
	CMPEQ R4, #0		//if they are equal, is R4 Null?
	BEQ	isStrSame_end	//if they are, go to end
	CMP R6, #0			
	BEQ isStrSame_end	//ends if R6 is #0 or they aren't equal
	ADD R0, R0, #1		//
	ADD R1, R1, #1		//increments both R0 and R1
	B isStrSame_loop	//will compare next part of string
isStrSame_end:
	MOV R0, R6			//will move R6 into R0. R6 will always be 1 unless the
	pop {R4, R5, R6}	//strings are not equal, then it will have 0
	BX LR
	
//////////////////////////////////////////////
//void strConcatenate(char TO[], char FROM[])
//adds the contents of string from FROM to TO
//note: TO must have enough space to hold FROM and TO
strConcatenate:
	PUSH {R4}
	MOV R2, #0 // counter for both (will be reset for second word)
	MOV R3, #0 // will be used as a char holder
	MOV R4, #0 // counter for both (will NOT be reset so we can add to R0)
	
strConcatenate_loop:
	LDRSB R3, [R0, R2] // loads position R2 of R0 into R3
	CMP R3, #0			//compare first position of TO to NULL
	MOVEQ R3, #0		//if equal, move 0's into R3 and R2 and go to loop2
	MOVEQ R2, #0
	BEQ strConcatenate_loop2
	ADD R4, R4, #1		//else, increment R4 and R2. R4 keps track of the length for STR
	ADD R2, R2, #1		//R2 keeps track of length for first LDR and resets for the second loop
	B strConcatenate_loop
	
strConcatenate_loop2:
	LDRSB R3, [R1, R2]	//load R1 at position R2 into R3
	CMP R3, #0			//cmp R3 with null
	MOVEQ R3, #0		//if null, move 0 into R3 and got to loop3 which will put null at the end
	BEQ strConcatenate_loop3
	STRB R3, [R0, R4]	//Store R3 into position R4 in R0
	ADD R4, R4, #1		//increment R4 and R2
	ADD R2, R2, #1
	B strConcatenate_loop2
	
strConcatenate_loop3:
	STRB R3, [R0, R4]	//stores R4th position of R0 into R3
	B strConcatenate_end
	
strConcatenate_end:
	POP {R4}
	BX LR
//////////////////////////////////////////////
//uint32_t sumU16_32(const uint16_t x[], uint32_t count) 
//returns sum of the values in the array (x) containing count entries.
sumU16_32:
	PUSH {R4, R5}
	MOV R2, #0		//counter
	MOV R4, #0		//SUM variable
	MOV R5, #2		//got code to work because I used wrong LDR.LDRSB instead of LDRH
	MUL R1, R1, R5
	
sumU16_32_loop:
	CMP R1, R2			//will compare R1 (count) and R2
	BEQ sumU16_32_end
	LDRSB R3, [R0, R2]	//loads position R2 of R0 into R3
	ADD R4, R4, R3		//Adds what is in R3 into R4
	ADD R2, R2, #1		//Adds one to the counter for LDR
	B sumU16_32_loop 
	
sumU16_32_end:
	MOV R0, R4
	POP {R4, R5}
	BX LR
///////////////////////////////////////////////
//int32_t sumS32(const int32_t x[], uint32_t count) 
//returns sum of the values in the array (x) containing count entries.
sumS32:
	PUSH {R4, R5}
	MOV R2, #0
	MOV R4, #0
	MOV R5, #2
	MUL R1, R1, R5		//I used the wrong LDR. Should be LDRSH
	
sumS32_loop:
	CMP R1, R2			//compares count to R2 (if R2 is at the end)
	BEQ sumS_32_end		
	LDR R3, [R0, R2]	//Load pos R2 of R0 into R3 to add to R4
	ADD R4, R4, R3
	ADD R2, R2, #1
	B sumS_32_loop 
	
sumS_32_end:
	MOV R0, R4
	POP {R4, R5}
	BX LR
	
///////////////////////////////////////////////
//uint32_t countInRange(const int32_t x[], int32_t low, int32_t high, uint32_t count) 
//returns number of values in the array (x) containing count entries that are >= low and <= high
countInRange:
	push {R4, R5, R6, R7}
	MOV R4, #0		//R4 will be incremented up to the counter (counter variable)
	MOV R5, #0		//Integer holder
	MOV R6, #0		//Amount of ints that are in the range
	MOV R7, #4		//used wrong LDR
	MUL R3, R3, R7	//used the wrong LDR so i had to MUL
countInRange_loop:
	LDRSB R5, [R0, R4]	//Load R4 of R0 into R5
	CMP R4, R3			//cmp R4 and R3(COUNT)
	BEQ countInRange_end	
	CMP R5, R1			//cmp R5 INT Variable to R1(The LOW)
	BGE countInRange_cond2 //if greater than equal it will go to cond2
	ADD R4, R4, #1		
	B countInRange_loop
countInRange_cond2:
	CMP R5, R2			//compares the high to the current Int Variable
	ADDLE R6, R6, #1	//if less than, Add 1 to R6 (amount that are in range)
	ADD R4, R4, #1		//adds to incrementer to test next variable
	B countInRange_loop
countInRange_end:
	MOV R0, R6
	pop {R4, R5, R6, R7}
	BX LR

///////////////////////////////////////////////
//void rightStringFull(char* strOut, const char* strIn, uint32_t length) 
//								R0					R1				R2
// input: array (strIn) containing the input string, and the number of characters toextract (length)
// output: array (strOut) containing length number of strIn characters from the end of the array or an empty string if the length is larger than can be accommodated
// strIn = ‘abcdef’, length = 5 → returns strOut = ‘bcdef’
// strIn = ‘abcdef’, length = 7 → returns strOut = ‘’
rightStringFull:
	PUSH {R4}
	//Find String length
	MOV R3,#0	//string length = 0
	
rightStringFull_Strlength:
	LDRSB R4,[R1]	//R4 = strIn[i]
	CMP R4,#0		//R4 == 0?
	BEQ rightStringFull_check //string length get
	ADD R3,R3,#1	//strLength++
	ADD R1,R1,#1	//strIn[i++]
	B rightStringFull_Strlength//continue getting string length
	
rightStringFull_check:
	CMP R3,R2	//Compare to strLength to "length"
	BLT rightStringFull_tooLong
	SUB R1,R1,R3	//i=0
	//stringLength >= length ,continue
	SUB R3,R3,R2	//strlength -= length
	ADD R1,R1,R3	//&strIn[0+offset]
	
rightStringFull_loop:
	LDRSB R4,[R1]	//R4 = strIn[R1]
	STRB R4, [R0]	//strOut[j] = strIn[i]
	ADD R0,R0,#1	//strOut[j++]
	ADD R1,R1,#1	//strIn[i++]
	CMP R4,#0	//R4 ==0?
	BEQ rightStringFull_end//done
	B rightStringFull_loop	//continue loop
	
rightStringFull_tooLong://length > string,return null
	MOV R4,#0	//R4 = '\0'
	STRB R4,[R0]	//strOut[0] = '\0'
	
rightStringFull_end:
	POP {R4}
	BX LR
	
///////////////////////////////////////////////
//void rightStringTrunc(char* strOut, const char* strIn, uint32_t length) 
// input: array (strIn) containing the input string, and the number of characters toextract (length)
// output: array (strOut) containing up to, but not exceeding length number of strIn characters from the end of the array
// strIn = ‘abcdef’, length = 5 → returns strOut = ‘bcdef’
// strIn = ‘abcdef’, length = 7 → returns strOut = ‘abcdef’
rightStringTrunc:
	PUSH {R4,R5}
	MOV R3, #0							//R3 = count
	MOV R5, #0							//R5 = check
	
rightStringTrunc_check
	LDRSB R4, [R1, R5]					//R4 IN[i]
	CMP R4, #0							//R4 == NULL?
	BEQ rightStringTrunc_check1			//if NULL go to check1
	ADD R5, R5, #1						//i++
	B rightStringTrunc_check			//loop
	
rightStringTrunc_check1:
	CMP R2, R5							//i > length?
	BGT rightStringTrunc_TooMany		//if (i>length), go to TooMany
	SUBLE R2, R2, #1
	BLE rightStringTrunc_loop			//if(i<=length), go to loop
	
rightStringTrunc_TooMany:
	LDRSB R4, [R1], #1
	STRB R4, [R0], #1
	CMP R5, #0
	BEQ rightStringTrunc_end
	SUB R5, R5, #1
	B rightStringTrunc_TooMany
	
rightStringTrunc_loop:
	LDRSB R4, [R1, R2]					//load IN[length-i] into R4
	CMP R2, #-1 						// R2 == 0?
	BEQ rightStringTrunc_end			//if(length == 0) break
	STRB R4, [R0], #1					//load R4 into OUT[j]
	SUB R2, R2, #1						//decrement count
	B rightStringTrunc_loop				//loop
	
rightStringTrunc_end:
	POP {R4,R5}
	BX LR
	
///////////////////////////////////////////////
//void sortAscending (uint32_t x[], uint32_t count) 
// input: array (x) containing count entries
// output: array (x), with the values sorted in ascending order

sortAscending:
	PUSH {R4,R5,R6,R7,LR}
sortAscending_restart:
	MOV R2, #0
	MOV R4, #0
	
sortAscending_loop:
	ADD R3, R2, #1
	CMP R3, R1
	CMPGE R4, #0
	SUBGT R1, R1, #1
	BGT sortAscending_restart
	BLE sortAscending_end
	LDR R5, [R0, R2, LSL #2]		//This or BL LR for STR
	LDR R6, [R0, R3, LSL #2]
	CMP R5, R6
	STRGT R6, [R0, R2, LSL #2]
	STRGT R5, [R0, R3, LSL #2]
	ADDGT R4, R4, #1
	MOV R2, R3
	B sortAscending_loop

sortAscending_end:
	POP {R4, R5, R6, LR}
	BX LR
	
/*////////////////////////////////
sortAscending:
	PUSH {R4, R5, R6,R7, LR}
	MOV R2, R0		//R2 is 
	MOV R0, #0
	MOV R6, #0
	MOV R5, #1
	
sortAscending_loop:
	ADD
	CMP R0, R1
	BEQ sortAscending_end
	LDR R3, [R2, R0, LSL #2]
	LDRSB R4, [R2, R7, LSL #2]
	CMP R3, R4
	STRGT R4, [R2, R0, LSL #2]
	STRGT R3, [R2, R5, LSL #2]
	ADDLE R0, R0, #1
	ADDLE R5, R5, #1
	BLE sortAscending_loop
	BGT sortAscending_swap
	B sortAscending_loop
	
sortAscending_swap:
	STRGT R4, [R2, R0, LSL #2]
	STRGT R3, [R2, R5, LSL #2]
	
sortAscending_end:
	POP {R4, R5, R6, R7, PC}
	BX LR
*/
/*
sortAscending:
	//R0 = &x[]
	//R1 = count
	PUSH {R4,R5,R6,R7}
	MOV R7,R0	//R7 = x[0]
	MOV R6, R1	//R6 = count
sortAscending_start:

	MOV R0,R7	//R0 = x[0]
	MOV R2,R1	//R2 = count
	CMP R6,#0	//outer loop check
	BEQ sortAscending_end //done
	SUB R6,R6,#1	//R6--

sortAscending_loop:
	CMP R2,#1
	BEQ sortAscending_start//one loop done
	LDR R3,[R0]
	LDR R4,[R0,#4]
	CMP R3,R4
	BGT swap
	SUB R2,R2,#1
	ADD R0,R0,#4
	B sortAscending_loop//continue sort

swap:
	STR R4, [R0]
	STR R3, [R0,#4]
	SUB R2,R2,#1
	ADD R0,R0,#4
	B sortAscending_loop//continue sort

sortAscending_end:
	POP {R4,R5,R6,R7}
	BX LR

*/

///////////////////////////////
///////////////////////////////////////////////	
// uint16_t decimalStringToUint16(const char* str) 
// convert the null-terminated string (str) to an unsigned 16-bit integer
// treat the string as representing a decimal number
// if a character other than 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 is present or the value is too large, return 0

decimalStringToUint16:
	PUSH {R4}
	PUSH {R5}
	PUSH {R6}
	MOV R1, #0
	MOV R2, #1
	MOV R4, #0
	MOV R5, #10
	MOV R6, #65536
endOfStringU16:
	LDRSB R3, [R0], #1
	ADD R4, R4, #1
	CMP R3, #0
	BNE endOfStringU16
	SUB R4, R4, #1
	SUB R0, R0, #2
DSU16loop:
	LDRSB R3, [R0]
	SUB R0, R0, #1
	SUB R3, R3, #48
	CMP R3, #0
	BGE checkIfInRangeDSU16
	MOV R1, #65536
	B endDSU16
checkIfInRangeDSU16:
	CMP R3, #10
	MOVGE R1, #65536
	BGE endDSU16
	MUL R3, R3, R2
	ADD R1, R1, R3
	MUL R2, R2, R5
	SUB R4, R4, #1
	CMP R4, #0
	BNE DSU16loop
endDSU16:
	CMP R1, R6
	MOVLT R0, R1
	MOVGE R0, #0
	POP {R6}
	POP {R5}
	POP {R4}
	BX LR
/////////////////////////////////////////////SECOND VERS
decimalStringToUint16:
	PUSH {R4,R5,R6}
	MOV R1,R0									//R1 = str[0]
	MOV R0,#0									//x=0
	MOV R3,#1									//R3 =1
	MOV R4,#10									//Base 10
	MOV R5,#0									//length = 0

decimalStringToUint16_length:
	LDRSB R2,[R1]								//R2 = str[i]
	CMP R2,#0									//R2 == '\0'?
	BEQ decimalStringToUint16_next
	ADD R5,R5,#1								//length++
	ADD R1,R1,#1								//i++
	B decimalStringToUint16_length

decimalStringToUint16_next:
	CMP R5,#5									//size check
	BGT failed									//too large, return 0
	SUB R1,R1,#1								//last array value

decimalStringToUint16_loop:
	CMP R5,#0									//length ==0?
	BEQ decimalStringToUint16_end 				//done
	LDRSB R2,[R1]								//R2 = str[i]
	//cheking if R2 is a number
	CMP R2,#0x30
	BLT failed
	CMP R2,#0x39
	BGT failed
	//R2 is a number
	SUB R2,R2,#0x30
	B decimalStringToUint16_continue

decimalStringToUint16_continue:
	MUL R2,R3,R2								//
	ADDS R0,R0,R2								//set flags
	//checking overflow
	AND R6,R0, #0x00010000
	CMP R6,#0
	BGT failed									//too large, return 0
	MUL R3,R4,R3								//R3 *= 10
	SUB R1,R1,#1								//i--
	SUB R5,R5,#1								//length--
	B decimalStringToUint16_loop

	failed:
	MOV R0,#0									//returning 0

decimalStringToUint16_end:
	POP {R4,R5,R6}
	BX LR
	
///////////////////////////////////////////////	
// int8_t decimalStringToInt8(const char* str) 
// convert the null-terminated string (str) to a signed 8-bit integer
// treat the string as representing a decimal number
// if a character other than 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, or – is present or the value isout of range, return 0

decimalStringToInt8:
	PUSH {R4}
	PUSH {R5}
	PUSH {R6}
	PUSH {R7}
	MOV R1, #0
	MOV R2, #1
	MOV R4, #0
	MOV R5, #10
	MOV R6, #128			
	MVN R7, #127			
endOfStringI8:
	LDRSB R3, [R0], #1
	ADD R4, R4, #1
	CMP R3, #0
	BNE endOfStringI8
	SUB R4, R4, #1
	SUB R0, R0, #2
DSI8loop:
	LDRSB R3, [R0]
	SUB R0, R0, #1
	SUB R4, R4, #1
	SUB R3, R3, #48
	CMP R3, #-3
	SUBEQ R1, R1, #1
	MVNEQ R1, R1
	BEQ endDSI8
	CMP R3, #0
	BGE checkIfInRangeDSI8
	MOV R1, #128
	B endDSI8
checkIfInRangeDSI8:
	CMP R3, #10
	MOVGE R1, #128
	BGE endDSI8
	MUL R3, R3, R2
	ADD R1, R1, R3
	MUL R2, R2, R5
	CMP R4, #0
	BNE DSI8loop
endDSI8:
	MOV R0, #0
	CMP R1, R7
	BLT endcontDSI8
	CMP R1, R6
	MOVLT R0, R1
endcontDSI8:
	POP {R7}
	POP {R6}
	POP {R5}
	POP {R4}
	BX LR

/////////////////////////////////////////////SECOND VERS
decimalStringToInt8:
	PUSH {R4,R5,R6}
	MOV R1,R0	//R1 = str[0]
	MOV R0,#0	//x=0
	MOV R3,#1	//R3=1
	MOV R4,#10	//Base 10
	MOV R5,#0	//length = 0

decimalStringToInt8_length:
	LDRSB R2,[R1]	//R2 = str[i]
	CMP R2,#0	//R2 == '\0'?
	BEQ decimalStringToInt8_next
	ADD R5,R5,#1	//length++
	ADD R1,R1,#1	//i++
	B decimalStringToInt8_length

decimalStringToInt8_next:
	CMP R5,#4	//size check
	BGT decimalStringToInt8_failed	//too large, return 0
	SUB R1,R1,#1	//last array value

decimalStringToInt8_loop:
	CMP R5,#0	//length ==0?
	BEQ decimalStringToInt8_end
	LDRSB R2,[R1]	//R2 = str[i]
	//cheking if negative
	CMP R2,#0x2D
	BEQ negate
	//cheking if R2 is a number
	CMP R2,#0x30
	BLT decimalStringToInt8_failed
	CMP R2,#0x39
	BGT decimalStringToInt8_failed
	//R2 is a number
	SUB R2,R2,#0x30
	B decimalStringToInt8_continue

negate:
	MOV R6,#-1
	MUL R0,R6,R0
	CMP R0,#-128
	BLT decimalStringToInt8_failed //too low, return 0
	B decimalStringToInt8_end

decimalStringToInt8_continue:
	MUL R2,R3,R2	//
	ADD R0,R0,R2	//
	MUL R3,R4,R3	//R3 *= 10
	SUB R1,R1,#1	//i--
	SUB R5,R5,#1	//length--
	B decimalStringToInt8_loop

decimalStringToInt8_failed:
	MOV R0,#0

decimalStringToInt8_end:
	//checking overflow,//-128,127
	CMP R0,#127
	BGT decimalStringToInt8_failed	//too large, return 0
	POP {R4,R5,R6}
	BX LR
	
///////////////////////////////////////////////	
// uint8_t hexStringToUint8(const char* str) 
// convert the null-terminated string (str) to an unsigned 8-bit integer
// treat the string as representing a hexadecimal number
// if a character other than 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, or F is present or the value is too large, return 0

hexStringToUint8:
	PUSH {R4,R5,R6}
	MOV R1,R0	//R1 = str[0]
	MOV R0,#0	//x=0
	MOV R3,#1	//R3=1
	MOV R4,#16	//Base 16
	MOV R5,#0	//length = 0

hexStringToUint8_length:
	LDRSB R2,[R1]	//R2 = str[i]
	CMP R2,#0	//R2 == '\0'?
	BEQ hexStringToUint8_next
	ADD R5,R5,#1	//length++
	ADD R1,R1,#1	//i++
	B hexStringToUint8_length

hexStringToUint8_next:
	CMP R5,#2	//size check
	BGT hexStringToUint8_failed	//too large, return 0
	SUB R1,R1,#1	//last array value

hexStringToUint8_loop:
	CMP R5,#0	//length ==0?
	BEQ hexStringToUint8_end
	LDRSB R2,[R1]	//R2 = str[i]
	//cheking if R2 is a number
	CMP R2,#0x30
	BLT hexStringToUint8_failed
	CMP R2,#0x39
	BGT hexStringToUint8_letter
	//R2 is a number
	SUB R2,R2,#0x30
	B hexStringToUint8_continue

hexStringToUint8_letter:
	CMP R2,#0x41
	BLT hexStringToUint8_failed//not a letter
	CMP R2,#0x46
	BGT hexStringToUint8_failed//not a letter
	//R2 is a "letter"
	SUB R2,R2,#55
	B hexStringToUint8_continue

hexStringToUint8_continue:
	MUL R2,R3,R2	//
	ADD R0,R0,R2	//
	MUL R3,R4,R3	//R3 *= 16
	SUB R1,R1,#1	//i--
	SUB R5,R5,#1	//length--
	B hexStringToUint8_loop

hexStringToUint8_failed:
	MOV R0,#0

hexStringToUint8_end:
	//checking overflow,0-255
	CMP R0,#255
	BGT hexStringToUint8_failed//too large, return 0
	POP {R4,R5,R6}
	BX LR
///////////////////////////////////////////////////////////SECOND VERS
	hexStringToUint8:
	PUSH {R4}
	PUSH {R5}
	PUSH {R6}
	MOV R1, #0			//Current Val
	MOV R2, #1			//Weight
	MOV R4, #0			//Count
	MOV R5, #16			//Weight factor
	MOV R6, #256		//Max Val			
endOfStringH8:
	LDRSB R3, [R0], #1
	ADD R4, R4, #1
	CMP R3, #0
	BNE endOfStringH8
	SUB R4, R4, #1
	SUB R0, R0, #2
HSU8loop:
	LDRSB R3, [R0]
	SUB R0, R0, #1
	SUB R4, R4, #1
	SUB R3, R3, #48
	CMP R3, #0
	BGE checkIfInRangeHSU8
	MOV R1, #256
	B endDSI8
checkIfInRangeHSU8:
	CMP R3, #10
	BLT RangeHSU8cont
	SUB R3, #7
	CMP R3, #10
	MOVLT R1, #256
	BLT endHSU8
	CMP R3, #16
	MOVGE R1, #256
	BGE endHSU8
RangeHSU8cont:
	MUL R3, R3, R2
	ADD R1, R1, R3
	MUL R2, R2, R5
	CMP R4, #0
	BNE HSU8loop
endHSU8:
	MOV R0, #0
	CMP R1, R6
	MOVLT R0, R1
	POP {R6}
	POP {R5}
	POP {R4}
	BX LR
	
///////////////////////////////////////////////	10/1
// void uint32ToBinaryString (char* str, uint32_t x) 
// convert the unsigned integer (x) to a null-terminated string (str) representing abinary number

uint32ToBinaryString:
	PUSH {R4,R5}
	MOV R2,#1
	MOV R2,R2, ROR #1//mask
	MOV R4,#0x30	//'0'
	MOV R5,#32	//counter

uint32ToBinaryString_loop:
	CMP R5,#0
	BEQ uint32ToBinaryString_end//done
	AND R3,R1,R2
	CMP R3,#0
	BNE uint32ToBinaryString_one
	STRB R4,[R0]	//write 0
	LSL R1,#1	//
	SUB R5,R5,#1	//counter--
	ADD R0,R0,#1	//i++
	B uint32ToBinaryString_loop //continue loop

uint32ToBinaryString_one:
	ADD R4,R4,#1
	STRB R4,[R0]	//write 1
	SUB R4,R4,#1	//'0'
	LSL R1,#1	//
	SUB R5,R5,#1	//counter--
	ADD R0,R0,#1	//i++
	B uint32ToBinaryString_loop //continue loop

uint32ToBinaryString_end:
	MOV R4,#0
	STRB R4,[R0]	//adding null terminator
	POP {R4,R5}
	BX LR
	
///////////////////////////////////////////////
//int32_t findCityAligned (const char city[], const BUSINESS6 business[], uint32_t count) 
// returns the index of the first entry in the array (business) containing count entries which matches the requested city.  If the city is not found, return a value of -1.  You can assume that C default alignment is used for this problem.

findCityAligned:
	PUSH {R4,R5,R6,R7,R8,R9,R10}
	MOV R5, R0 //adress of city from struct put into R5 to use to reset R0
	MOV R10,#0 //position in struct
	MOV R3, #100 //size of struct
	ADD R1,R1,#64 //Adding to the struct to get to position of city[28]
	
findCityAligned_loop:
	CMP R2,#0 //!= NULL
	MOV R0,R5 //put address of city into R0 (when we loop back this resets R0)
	MOVEQ R0,#-1 //if == NULL, return -1
	BEQ findCityAligned_end
	MOV R9,#1 //R9 = 1
	BNE findCityAligned_loop1

findCityAligned_beforeloop:
	SUB R9,R9,#1	//decrement R9
	SUB R1,R1,R9	//R9 will RESET the STRUCT array. if we keep adding to offset, we also need to sub from offset to reset.
	ADD R1,R1,R3	//R3 is 100, the sizeof(BUSINESS)
	SUB R2,R2,#1	//the Count (amount of structs)
	ADD R10,R10,#1	//position we are at in the struct
	B findCityAligned_loop

findCityAligned_loop1:
	LDRSB R6, [R1],R9	//Load R9 char from BUSINESS struct array
	LDRSB R7, [R0],R9	//Load R9 char from city array
	ADD R9,R9,#1		//increment R9
	CMP R6,R7			//check if BUSINESS char == city char
	BNE findCityAligned_beforeloop		//If not equal, go to the next city to compare
	CMP R6, #0			//is char Null?
	MOVEQ R0,R10		//if char is NULL, move R10 (the position in the struct where we are) into R0 and exit to the end. 
	BEQ findCityAligned_end	
	BNE findCityAligned_loop1	//else, keep looping until end of string

findCityAligned_end:
	POP {R4,R5,R6,R7,R8,R9,R10}
	BX LR

	
///////////////////////////////////////////////
//int32_t findCityPacked (const char city[], const BUSINESS6 business[], uint32_t count) 
// returns the index of the first entry in the array (business) containing count entries which matches the requested city.  If the city is not found, return a value of -1.  You can assume that C packing is used for this problem.

			//R0 City
				//R1 Business[]
				//R2 count
	PUSH {R4} 	//R4 index 
	PUSH {R5} 	//R5 char in city[] 
	PUSH {R6} 	//R6 char in business.city[] starts at 64
	PUSH {R8}	//R8 size of struct
	PUSH {R9}	//R9 keep record of city
	MVN R3, #0	//Assume city not found
	MOV R4, #0
	MOV R8, #98
	MOV R9, R0
	ADD R1, R1, #63
	
cityLoopP:
	LDRSB R5, [R0]
	LDRSB R6, [R1]
	CMP R5, R6
	BNE cityLoopP2
	ADD R0, R0, #1
	ADD R1, R1, #1
	CMP R5, #0
	BNE cityLoopP
	MOVEQ R3, R4
	BEQ endCityAlignP
	
cityLoopP2:
	MOV R0, R9
	ADD R4, R4, #1
	ADD R1, R1, R8
	CMP R4, R2
	BNE cityLoopP
	
endCityAlignP:
	MOV R0, R3
	POP {R9}
	POP {R8}
	POP {R6}
	POP {R5}
	POP {R4}
	BX LR
///////////////////////////////////////////////


//Alexander Rollison 
.global prodF64
.global int32ToFloat
.global dotpF32
.global minF64

.text

//void prodF64(double z[], const doublex[], const double y[], uint32_t count)
prodF64:
	
prodF64_loop:
	CMP R3, #0
	BEQ prodF64_end
	VLDR D0, [R1]
	VLDR D1, [R2]
	VMUL.F64 D0, D0, D1
	VSTR D0, [R0]
	ADD R2, R2, #8
	ADD R1, R1, #8
	ADD R0, R0, #8
	SUB R3, R3, #1
	B prodF64_loop
	
prodF64_end:
	BX LR
	
//float int32ToFloat(int32_t x)
int32ToFloat:
	VMOV S0, R0
	VCVT.F32.S32 S0, S0
	VMOV R0, S0
	
int32ToFloat_end:
	BX LR
	
//float dotpF32(const float x[], const float y[], uint32_t count)
dotpF32:
	MOV R3, #0
	VMOV S2, R3
	//VMOV S2, R3
	//VCVT.F32.S32 S2, S2
	//VMOV S2, R3
	
dotpF32_loop:
	CMP R2, #0
	BEQ dotpF32_end
	VLDR S0, [R0]
	VLDR S1, [R1]
	VMUL.F32 S0, S0, S1
	VADD.F32 S2, S2, S0
	ADD R0, R0, #4
	ADD R1, R1, #4
	SUB R2, R2, #1
	B dotpF32_loop
	
dotpF32_end:
	VMOV S0, S2
	BX LR

//double minF64(const double x[], uint32_t count)
minF64:
	VLDR D0, [R0]
	VMOV.F64 D1, D0
	
minF64_loop:
	CMP R1, #0
	BEQ minF64_end
	VLDR D0, [R0]
	VCMP.F64 D0, D1
	VMRS APSR_nzcv, FPSCR
	//VSUB.F64 D2, D0, D1
	//VMOV.U32.F64 R3, R2, D2
	//CMP R3, #0
	VMOVMI.F64 D1, D0
	ADD R0, R0, #8
	SUB R1, R1, #1
	B minF64_loop
	
minF64_end:
	VMOV.F64 D0, D1
	BX LR
